import pytest
import numpy as np
from KKMeans import KKMeans
from sklearn.datasets import make_blobs
from tests.pytest_utils import split_integer, RNG


@pytest.mark.parametrize("n_samples", [10, 3000])
@pytest.mark.parametrize("n_clusters", [5, 50, 100])
@pytest.mark.parametrize("n_features", [1, 10, 100, 1000, 3000])
def test_generated_blobs(n_samples, n_clusters, n_features):
    """
    creates blobs on a diagonal. box>>0 so that they do not overlap

    if this test fails, it is most likely because the clusters generated by make_blobs overlap, try bigger box
    MUST BE LINEAR KERNEL
    """
    box = 100000
    centers = (
        np.asarray(split_integer(box, box // n_clusters))
        * np.asarray(range(n_clusters))
        + (box // n_clusters) / 2
    )
    centers = np.ascontiguousarray(np.vstack([centers] * n_features).T)
    data, labels_c = make_blobs(
        n_samples, n_features, centers=centers, center_box=(0, box)
    )
    kkm = KKMeans(n_clusters, kernel="linear")
    labels_t = kkm._assign_to_centers(data, centers)
    assert all(labels_c == labels_t)


@pytest.mark.parametrize("n_samples", [10, 3000])
@pytest.mark.parametrize("n_clusters", [5, 50, 100])
@pytest.mark.parametrize("n_features", [1, 10, 100, 1000])
def test_generated_blobs_shuffled(n_samples, n_clusters, n_features):
    box = 100000
    centers = (
        np.asarray(split_integer(box, box // n_clusters))
        * np.asarray(range(n_clusters))
        + (box // n_clusters) / 2
    )
    centers = np.ascontiguousarray(np.vstack([centers] * n_features).T)
    RNG.shuffle(centers)
    data, labels_c = make_blobs(
        n_samples, n_features, centers=centers, center_box=(0, box)
    )
    kkm = KKMeans(n_clusters, kernel="linear")
    labels_t = kkm._assign_to_centers(data, centers)
    assert all(labels_c == labels_t)
