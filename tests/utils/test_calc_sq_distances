import numpy as np
import pytest
from sklearn.metrics.pairwise import pairwise_kernels, euclidean_distances
from utils import calc_sq_distances
from tests.pytest_utils import (
    RNG, ctrl_centers_linear, ctrl_inner_sums,
    create_labels, split_integer, ctrl_cluster_sizes
)




@pytest.mark.parametrize("data_max", [1, 1000])
@pytest.mark.parametrize("n_samples", [1, 1000])
@pytest.mark.parametrize("n_clusters", [1, 20])
@pytest.mark.parametrize("dim", [1, 10])
# linear kernel necessary to calculate centers explicitely
def test_correctness(data_max, n_samples, n_clusters, dim):
    if n_samples < n_clusters:
        pytest.xfail("n_samples must be >= n_clusters")    
    data = RNG.random((n_samples, dim)) * data_max
    labels = create_labels(
        split_integer(n_samples, n_samples // n_clusters)
    )
    km = pairwise_kernels(data, metric="linear")
    centers = ctrl_centers_linear(data, labels, n_clusters, dim)
    sq_dists_c = euclidean_distances(data, centers) ** 2
    inner_sums = ctrl_inner_sums(km, labels, n_clusters)
    sizes = ctrl_cluster_sizes(labels, n_clusters)
    sq_dists_t = calc_sq_distances(
        inner_sums, sizes, km,
        labels, n_clusters)
    assert np.allclose(sq_dists_c, sq_dists_t)

